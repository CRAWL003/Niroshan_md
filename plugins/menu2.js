import moment from 'moment-timezone';
import fs from 'fs';
import os from 'os';
import pkg from '@whiskeysockets/baileys';
const { generateWAMessageFromContent, proto } = pkg;
import config from '../config.cjs';

// Get total memory and free memory in bytes
const totalMemoryBytes = os.totalmem();
const freeMemoryBytes = os.freemem();

// Define unit conversions
const byteToKB = 1 / 1024;
const byteToMB = byteToKB / 1024;
const byteToGB = byteToMB / 1024;

// Function to format bytes to a human-readable format
function formatBytes(bytes) {
  if (bytes >= Math.pow(1024, 3)) {
    return (bytes * byteToGB).toFixed(2) + ' GB';
  } else if (bytes >= Math.pow(1024, 2)) {
    return (bytes * byteToMB).toFixed(2) + ' MB';
  } else if (bytes >= 1024) {
    return (bytes * byteToKB).toFixed(2) + ' KB';
  } else {
    return bytes.toFixed(2) + ' bytes';
  }
}

// Bot Process Time
const uptime = process.uptime();
const day = Math.floor(uptime / (24 * 3600)); // Calculate days
const hours = Math.floor((uptime % (24 * 3600)) / 3600); // Calculate hours
const minutes = Math.floor((uptime % 3600) / 60); // Calculate minutes
const seconds = Math.floor(uptime % 60); // Calculate seconds

// Uptime
const uptimeMessage = `*I am alive now since ${day}d ${hours}h ${minutes}m ${seconds}s*`;
const runMessage = `*‚òÄÔ∏è ${day} Day*\n*üïê ${hours} Hour*\n*‚è∞ ${minutes} Minutes*\n*‚è±Ô∏è ${seconds} Seconds*\n`;

const xtime = moment.tz("Africa/Zimbabwe").format("HH:mm:ss");
const xdate = moment.tz("Africa/Zimbabwe").format("DD/MM/YYYY");
const time2 = moment().tz("Africa/Zimbabwe").format("HH:mm:ss");
let pushwish = "";

if (time2 < "05:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "11:00:00") {
  pushwish = `Good Morning üåÑ`;
} else if (time2 < "15:00:00") {
  pushwish = `Good Afternoon üåÖ`;
} else if (time2 < "18:00:00") {
  pushwish = `Good Evening üåÉ`;
} else if (time2 < "19:00:00") {
  pushwish = `Good Evening üåÉ`;
} else {
  pushwish = `Good Night üåå`;
}

const test = async (m, Matrix) => {
  const prefix = config.PREFIX;
  const cmd = m.body.startsWith(prefix) ? m.body.slice(prefix.length).split(' ')[0].toLowerCase() : '';
  const mode = config.MODE === 'public' ? 'public' : 'private';
  const pref = config.PREFIX;

  const validCommands = ['list2', 'help2', 'menu2'];

  if (validCommands.includes(cmd)) {
    const str = `
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚îä  ô·¥è·¥õ…¥·¥Ä·¥ç·¥á : *·¥ä…™…¥·¥°·¥è·¥è ·¥†3*
‚îä ·¥è·¥°…¥·¥á Ä : *·¥ç·¥Ä ü·¥†…™…¥ ·¥ã…™…¥…¢*
‚îä ·¥ús·¥á Ä : *${m.pushName}*
‚îä ·¥ç·¥è·¥Ö·¥á : *${mode}*
‚îä ·¥ò ü·¥Ä·¥õ“ì·¥è Ä·¥ç : *${os.platform()}*
‚îä ·¥ò Ä·¥á“ì…™x : [${prefix}]
‚îä ·¥†·¥á Äs…™·¥è…¥ : *3.0.0*
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

> Hey ${m.pushName} ${pushwish}

 ‚ùê ùô≤ùôæùôΩùöÖùô¥ùöÅùöÉùô¥ùöÅ ùôºùô¥ùôΩùöÑ ‚ùê
‚ï≠‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ
‚îä ${prefix}·¥Ä·¥õ·¥õ·¥ò
‚îä ${prefix}·¥Ä·¥õ·¥õ·¥ò2
‚îä ${prefix}·¥Ä·¥õ·¥õ·¥ò3
‚îä ${prefix}·¥á ô…™…¥·¥Ä Ä è
‚îä ${prefix}·¥Ö ô…™…¥·¥Ä Ä è
‚îä ${prefix}·¥á·¥ç·¥è·¥ä…™·¥ç…™x
‚îä ${prefix}·¥ç·¥ò3
‚ï∞‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ùë

   ‚ùê ùô∞ùô∏ ùôºùô¥ùôΩùöÑ ‚ùê
‚ï≠‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ
‚îä ${prefix}·¥Ä…™
‚îä .${prefix} ô·¥ú…¢
‚îä .${prefix} Ä·¥á·¥ò·¥è Ä·¥õ
‚îä ${prefix}…¢·¥ò·¥õ
‚îä ${prefix}·¥Ö·¥Ä ü ü·¥á
‚îä ${prefix} Ä·¥á·¥ç…™…¥…™
‚îä ${prefix}…¢·¥á·¥ç…™…¥…™
‚ï∞‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ùë

   ‚ùê ùöÉùôæùôæùôª ùôºùô¥ùôΩùöÑ ‚ùê
‚ï≠‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ
‚îä ${prefix}·¥Ñ·¥Ä ü·¥Ñ·¥ú ü·¥Ä·¥õ·¥è Ä
‚îä ${prefix}·¥õ·¥á·¥ç·¥ò·¥ç·¥Ä…™ ü
‚îä ${prefix}·¥Ñ ú·¥á·¥Ñ·¥ã·¥ç·¥Ä…™ ü
‚îä ${prefix}·¥õ Ä·¥õ
‚îä ${prefix}·¥õ·¥õs
‚ï∞‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ùë

   ‚ùê ùô∂ùöÅùôæùöÑùôø ùôºùô¥ùôΩùöÑ ‚ùê
‚ï≠‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ
‚îä ${prefix} ü…™…¥·¥ã…¢·¥Ñ
‚îä .${prefix}s·¥á·¥õ·¥ò·¥ò…¢·¥Ñ
‚îä ${prefix}s·¥á·¥õ…¥·¥Ä·¥ç·¥á
‚îä ${prefix}s·¥á·¥õ·¥Ö·¥ás·¥Ñ
‚îä ${prefix}…¢ Ä·¥è·¥ú·¥ò
‚îä ${prefix}…¢·¥Ñs·¥á·¥õ·¥õ…™…¥s
‚îä ${prefix}·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á
‚îä ${prefix}·¥Ä·¥Ö·¥Ö
‚îä ${prefix}·¥ã…™·¥Ñ·¥ã
‚îä ${prefix} ú…™·¥Ö·¥á·¥õ·¥Ä…¢
‚îä ${prefix}·¥õ·¥Ä…¢·¥Ä ü ü
‚îä ${prefix}·¥Ä…¥·¥õ…™ ü…™…¥·¥ã
‚îä ${prefix}·¥Ä…¥·¥õ…™·¥õ·¥èx…™·¥Ñ
‚îä ${prefix}·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á
‚îä ${prefix}·¥Ö·¥á·¥ç·¥è·¥õ·¥á
‚îä ${prefix}.…¢·¥á·¥õ ô…™·¥è
‚ï∞‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ùë

   ‚ùê ùô≥ùôæùöÜùôΩùôªùôæùô∞ùô≥ ùôºùô¥ùôΩùöÑ ‚ùê
‚ï≠‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà
‚îä ${prefix}·¥Ä·¥ò·¥ã
‚îä ${prefix}“ì·¥Ä·¥Ñ·¥á ô·¥è·¥è·¥ã
‚îä ${prefix}·¥ç…™·¥Ö·¥á·¥Ä“ì…™ Ä·¥á
‚îä ${prefix}·¥ò…™…¥·¥õ·¥á Ä·¥ás·¥õ·¥Ö ü
‚îä ${prefix}…¢…™·¥õ·¥Ñ ü·¥è…¥·¥á
‚îä ${prefix}…¢·¥Ö Ä…™·¥†·¥á
‚îä ${prefix}…™…¥s·¥õ·¥Ä
‚îä ${prefix} è·¥õ·¥ç·¥ò3
‚îä ${prefix} è·¥õ·¥ç·¥ò4
‚îä ${prefix}·¥ò ü·¥Ä è
‚îä ${prefix}s·¥è…¥…¢
‚îä ${prefix}·¥†…™·¥Ö·¥á·¥è
‚îä ${prefix} è·¥õ·¥ç·¥ò3·¥Ö·¥è·¥Ñ
‚îä ${prefix} è·¥õ·¥ç·¥ò4·¥Ö·¥è·¥Ñ
‚îä ${prefix}·¥õ…™·¥ã·¥õ·¥è·¥ã
‚ï∞‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚ùë

   ‚ùê ùöÇùô¥ùô∞ùöÅùô≤ùô∑ ùôºùô¥ùôΩùöÑ ‚ùê
‚ï≠‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà
‚îä ${prefix}·¥ò ü·¥Ä è
‚îä ${prefix} è·¥õs
‚îä ${prefix}…™·¥ç·¥Ö ô
‚îä ${prefix}…¢·¥è·¥è…¢ ü·¥á
‚îä ${prefix}…¢…™·¥ç·¥Ä…¢·¥á
‚îä ${prefix}·¥ò…™…¥·¥õ·¥á Ä·¥ás·¥õ
‚îä ${prefix}·¥°·¥Ä ü ü·¥ò·¥Ä·¥ò·¥á Ä
‚îä ${prefix}·¥°…™·¥ã…™·¥ç·¥á·¥Ö…™·¥Ä
‚îä ${prefix} è·¥õs·¥á·¥Ä Ä·¥Ñ ú
‚îä ${prefix} Ä…™…¥…¢·¥õ·¥è…¥·¥á
‚îä ${prefix} ü è Ä…™·¥Ñs
‚ï∞‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ùë

   ‚ùê ùôºùô∞ùô∏ùôΩ ùôºùô¥ùôΩùöÑ ‚ùê
‚ï≠‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà
‚îä ${prefix}·¥ò…™…¥…¢
‚îä ${prefix}·¥Ä ü…™·¥†·¥á
‚îä ${prefix}·¥è·¥°…¥·¥á Ä
‚îä ${prefix}·¥ç·¥á…¥·¥ú
‚îã ${prefix}…™…¥“ì·¥è ô·¥è·¥õ
‚ï∞‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚ùë

   ‚ùê ùôæùöÜùôΩùô¥ùöÅ ùôºùô¥ùôΩùöÑ ‚ùê
‚ï≠‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà
‚îä ${prefix}·¥ä·¥è…™…¥
‚îä ${prefix} ü·¥á·¥Ä·¥†·¥á
‚îä ${prefix} ô ü·¥è·¥Ñ·¥ã
‚îä ${prefix}·¥ú…¥ ô ü·¥è·¥Ñ·¥ã
‚îä ${prefix}s·¥á·¥õ·¥ò·¥ò ô·¥è·¥õ
‚îä ${prefix}·¥Ä…¥·¥õ…™·¥Ñ·¥Ä ü ü
‚îä ${prefix}s·¥á·¥õs·¥õ·¥Ä·¥õ·¥ús
‚îä ${prefix}s·¥á·¥õ…¥·¥Ä·¥ç·¥á ô·¥è·¥õ
‚îä ${prefix}·¥Ä·¥ú·¥õ·¥è·¥õ è·¥ò…™…¥…¢
‚îä ${prefix}·¥Ä ü·¥°·¥Ä ès·¥è…¥ ü…™…¥·¥á
‚îä ${prefix}·¥Ä·¥ú·¥õ·¥è Ä·¥á·¥Ä·¥Ö
‚îä ${prefix}·¥Ä·¥ú·¥õ·¥ès·¥†…™·¥á·¥°
‚ï∞‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚ùë

   ‚ùê ùöÇùöÉùô∞ùôªùô∫ ùôºùô¥ùôΩùöÑ ‚ùê
‚ï≠‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà
‚îä ${prefix}·¥õ Ä·¥ú·¥á·¥Ñ·¥Ä ü ü·¥á Ä
‚îä ${prefix}…™…¥s·¥õ·¥Äs·¥õ·¥Ä ü·¥ã
‚îä ${prefix}…¢…™·¥õ ú·¥ú ôs·¥õ·¥Ä ü·¥ã
‚ï∞‚îâ‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚ùê

> ·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥°·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü “ì·¥è Ä ·¥ç·¥è Ä·¥á ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás`

    await Matrix.sendMessage(m.from, {
      image: fs.readFileSync('./media/jinwoo.jpg'),
      caption: str,
      contextInfo: {
        mentionedJid: [m.sender],
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: '120363306168354073@newsletter',
          newsletterName: "JINWOO-MD-V3",
          serverMessageId: 143
        }
      }
    }, {
      quoted: m
    });

    // Send audio after sending the menu
    await Matrix.sendMessage(m.from, {
      audio: { url: 'https://github.com/kingmalvn/KING-DATA/raw/refs/heads/main/autovoice/menunew.m4a' },
      mimetype: 'audio/mp4',
      ptt: true
    }, { quoted: m });
  }
};

export default test;
